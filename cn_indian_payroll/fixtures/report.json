[
 {
  "add_total_row": 1,
  "columns": [],
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Report",
  "filters": [],
  "is_standard": "Yes",
  "javascript": "\nfrappe.query_reports[\"Salary Slip Register\"] = {\n    \"filters\": [\n        {\n            \"label\": \"Employee ID\",\n            \"fieldname\": \"employee\",\n            \"fieldtype\": \"Link\",\n            \"options\": \"Employee\",\n            \"width\": 200\n        },\n        {\n            \"label\": \"Income Tax Slab\",\n            \"fieldname\": \"income_tax\",\n            \"fieldtype\": \"Link\",\n            \"options\": \"Income Tax Slab\",\n            \"width\": 200\n        },\n        \n         {\n            \"label\": \"From date\",\n            \"fieldname\": \"from_date\",\n            \"fieldtype\": \"Date\",\n            \n            \"width\": 200\n        },\n         {\n            \"label\": \"To Date\",\n            \"fieldname\": \"to_date\",\n            \"fieldtype\": \"Date\",\n            \n            \"width\": 200\n        },\n        \n        \n        \n    ]\n}\n",
  "json": null,
  "letter_head": "Meril",
  "modified": "2024-06-26 09:39:46.531202",
  "module": "cn-indian-payroll",
  "name": "Salary Slip Register",
  "prepared_report": 0,
  "query": null,
  "ref_doctype": "Salary Slip",
  "reference_report": null,
  "report_name": "Salary Slip Register",
  "report_script": "\ncolumns = [\n    \n    {\"fieldname\": \"ss_id\", \"label\": \"Salary Slip ID\", \"fieldtype\": \"Data\", \"width\": 150},\n    \n    \n    \n    {\"fieldname\": \"employee\", \"label\": \"Employee ID\", \"fieldtype\": \"Data\", \"width\": 150},\n    {\"fieldname\": \"employee_name\", \"label\": \"Employee Name\", \"fieldtype\": \"Data\", \"width\": 150},\n    {\"fieldname\": \"income_tax_slab\", \"label\": \"Income Tax Slab\", \"fieldtype\": \"Data\", \"width\": 150},\n    \n    {\"fieldname\": \"working_days\", \"label\": \"Working Days\", \"fieldtype\": \"Data\", \"width\": 150},\n    {\"fieldname\": \"payment_days\", \"label\": \"Payment Days\", \"fieldtype\": \"Data\", \"width\": 150},\n    {\"fieldname\": \"LOP\", \"label\": \"LOP\", \"fieldtype\": \"Data\", \"width\": 150},\n    \n     {\"fieldname\": \"start_date\", \"label\": \"Start Date\", \"fieldtype\": \"Date\", \"width\": 150},\n      {\"fieldname\": \"end_date\", \"label\": \"End Date\", \"fieldtype\": \"Date\", \"width\": 150},\n    \n    \n    {\"fieldname\": \"basic\", \"label\": \"Basic\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"hra\", \"label\": \"HRA\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"twa_dfi\", \"label\": \"TWA DFI\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"uniform_allowance\", \"label\": \"Uniform Allowance\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"medical_allowance\", \"label\": \"Medical Allowance\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"food_coupon\", \"label\": \"Food Coupon\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"heema\", \"label\": \"HEEMA\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"bonus\", \"label\": \"Bonus\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"bonus_accrual\", \"label\": \"Bonus Accrual\", \"fieldtype\": \"Currency\", \"width\": 100},\n    \n    {\"fieldname\": \"petrol_reimbursement\", \"label\": \"Petrol Reimbursement\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"vehicle_maintenance_reimbursement\", \"label\": \"Vehicle Maintenance Reimbursement\", \"fieldtype\": \"Currency\", \"width\": 250},\n    {\"fieldname\": \"driver_salary_reimbursement\", \"label\": \"Driver Salary Reimbursement\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"leave_travel_allowance\", \"label\": \"Leave Travel Allowance\", \"fieldtype\": \"Currency\", \"width\": 200},\n    \n    \n    {\"fieldname\": \"car_perquisite\", \"label\": \"Car Perquisite\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"driver_perquisite\", \"label\": \"Driver Perquisite\", \"fieldtype\": \"Currency\", \"width\": 200},\n    \n    \n    {\"fieldname\": \"employee_provident_fund\", \"label\": \"Employee Provident Fund\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"nps\", \"label\": \"NPS\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"esic\", \"label\": \"ESIC\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"bonus_deduction\", \"label\": \"Bonus Deduction\", \"fieldtype\": \"Currency\", \"width\": 150},\n   \n\n    {\"fieldname\": \"pt_g\", \"label\": \"Professional Tax (Gujarat)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"pt_m\", \"label\": \"Professional Tax (Maharashtra)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"pt_an\", \"label\": \"Professional Tax (Andrapradesh)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"pt_w\", \"label\": \"Professional Tax (West Bengal)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"pt_kar\", \"label\": \"Professional Tax (Karnataka)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    \n    \n    {\"fieldname\": \"income_tax\", \"label\": \"Income Tax\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"gross_pay\", \"label\": \"Gross Pay\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"net_pay\", \"label\": \"Net Pay\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"total_deduction\", \"label\": \"Total Deduction\", \"fieldtype\": \"Currency\", \"width\": 150},\n    \n    \n    \n     \n    \n    \n    \n]\n\n\n\n\n\n\n\n\n\n\n\ndef get_salary_slips(filters=None):\n    if filters is None:\n        filters = {}\n\n    conditions = {}\n    if filters.get(\"employee\"):\n        conditions[\"employee\"] = filters[\"employee\"]\n        \n    if filters.get(\"from_date\"):\n        conditions[\"start_date\"] = (\">=\", filters[\"from_date\"])\n        \n    if filters.get(\"to_date\"):\n        conditions[\"end_date\"] = (\"<=\", filters[\"to_date\"])\n        \n    if filters.get(\"income_tax\"):\n        conditions[\"custom_income_tax_slab\"] = filters[\"income_tax\"]\n        \n        \n        \n        \n    data = frappe.get_list(\n        'Salary Slip',\n        fields=[\"*\"],\n        filters=conditions,\n        order_by=\"name DESC\"\n    )\n   \n    return data\n    \nss_id=[]   \ntotal_working_days=[]\npayment_days=[]\nleave_without_pay=[]\nemployee = []\nemployee_name = []\nbasic = []\nhra = []\ntwa = []  \nuniform = []\nmedical = []\nfood_coupon = []\nheema = []\n\nfuel = []  \ndriver = [] \nvehicle=[]\nlta = []  \n\nepf=[]\nnps=[]\nesic=[]\n\npt_g=[]\npt_m=[]\npt_an=[]\npt_w=[]\npt_kar=[]\nincome_tax_slab=[]\n\ntotal_deduction=[]\nnet_pay=[]\ngross_pay=[]\nincome_tax=[]\n\ncar_perquisite=[]\ndriver_perquisite=[]\nstart_date=[]\nend_date=[]\n\nbonus_deduction=[]\nbonus=[]\nbonus_accrual=[]\n\ndata=[]\n\nlead_data = get_salary_slips(filters)\n\nfor slip in lead_data:\n    doc = frappe.get_doc('Salary Slip', slip.name)\n    employee.append(doc.employee)\n    employee_name.append(doc.employee_name)\n    total_deduction.append(doc.total_deduction)\n    net_pay.append(doc.net_pay)\n    \n    ss_id.append(doc.name) \n    total_working_days.append(doc.total_working_days) \n    payment_days.append(doc.payment_days) \n    leave_without_pay.append(doc.leave_without_pay) \n    gross_pay.append(doc.custom_statutory_grosspay)\n    \n    income_tax_slab.append(doc.custom_income_tax_slab)\n   \n    start_date.append(doc.start_date)\n    end_date.append(doc.end_date)\n    \n    for earning in doc.earnings:\n        if earning.salary_component == \"Basic\":\n            basic.append(earning.amount)\n        if earning.salary_component == \"House Rent Allowance\":\n            hra.append(earning.amount)\n        if earning.salary_component == \"TWA-DFI\":  \n            twa.append(earning.amount)\n        \n        if earning.salary_component == \"Uniform\":\n            uniform.append(earning.amount)\n        if earning.salary_component == \"Medical\":\n            medical.append(earning.amount)\n        if earning.salary_component == \"Food Coupon\":\n            food_coupon.append(earning.amount)\n        if earning.salary_component == \"HEEMA\":\n            heema.append(earning.amount)\n        if earning.salary_component == \"Petrol Reimbursement\":\n            fuel.append(earning.amount)\n        if earning.salary_component == \"Vehicle Maintenance Reimbursement\":\n            vehicle.append(earning.amount)\n        if earning.salary_component == \"Driver Salary Reimbursement\":\n            driver.append(earning.amount)\n        if earning.salary_component == \"Leave Travel Allowance\":\n            lta.append(earning.amount)\n        if earning.salary_component == \"Car Perquisite\":\n            car_perquisite.append(earning.amount)\n        if earning.salary_component == \"Driver Perquisite\":\n            driver_perquisite.append(earning.amount)\n            \n        if earning.salary_component==\"Bonus\":\n            bonus.append(earning.amount)\n            \n        if earning.salary_component ==\"Bonus (Accrual)\":\n            bonus_accrual.append(earning.amount)    \n            \n    for deduction in doc.deductions:\n        if deduction.salary_component == \"Employee Provident Fund\":\n            epf.append(deduction.amount)\n        if deduction.salary_component == \"NPS\":\n            nps.append(deduction.amount)\n        if deduction.salary_component == \"ESIC\":\n            esic.append(deduction.amount)\n        if deduction.salary_component == \"Professional Tax (Gujarat)\":\n            pt_g.append(deduction.amount)\n        if deduction.salary_component == \"Income Tax\":\n            income_tax.append(deduction.amount)\n            \n        if deduction.salary_component==\"Bonus Deduction\":\n            \n            bonus_deduction.append(deduction.amount)\n            \n        if deduction.salary_component==\"Professional Tax (Maharashtra)\":\n            pt_m.append(deduction.amount)\n            \n        if deduction.salary_component==\"Professional Tax (Andra Pradesh)\":\n            pt_an.append(deduction.amount)\n        \n        \n        if deduction.salary_component==\"Professional Tax ( West Bengal)\":\n            pt_w.append(deduction.amount)\n        \n        \n        if deduction.salary_component==\"Professional Tax (Karnata)\":\n            pt_kar.append(deduction.amount)\n   \n            \n            \n\n   \n\nmax_length = max(len(employee), len(employee_name), len(basic), len(hra), len(twa),\n                 len(uniform), len(medical), len(food_coupon), len(heema))\n\nemployee.extend([''] * (max_length - len(employee)))\nemployee_name.extend([''] * (max_length - len(employee_name)))\nbasic.extend([0] * (max_length - len(basic)))\nhra.extend([0] * (max_length - len(hra)))\ntwa.extend([0] * (max_length - len(twa)))\nuniform.extend([0] * (max_length - len(uniform)))\nmedical.extend([0] * (max_length - len(medical)))\nfood_coupon.extend([0] * (max_length - len(food_coupon)))\nheema.extend([0] * (max_length - len(heema)))  \nfuel.extend([0] * (max_length - len(fuel)))  \nvehicle.extend([0] * (max_length - len(vehicle)))  \ndriver.extend([0] * (max_length - len(driver)))  \nlta.extend([0] * (max_length - len(lta))) \nnps.extend([0] * (max_length - len(nps)))  \nesic.extend([0] * (max_length - len(esic)))  \npt_g.extend([0] * (max_length - len(pt_g)))  \nincome_tax.extend([0] * (max_length - len(income_tax))) \nepf.extend([0] * (max_length - len(epf)))\ncar_perquisite.extend([0] * (max_length - len(car_perquisite)))\ndriver_perquisite.extend([0] * (max_length - len(driver_perquisite)))\nbonus_deduction.extend([0] * (max_length - len(bonus_deduction)))\nbonus.extend([0] * (max_length - len(bonus)))\nbonus_accrual.extend([0] * (max_length - len(bonus_accrual)))\npt_m.extend([0] * (max_length - len(pt_m)))\npt_an.extend([0] * (max_length - len(pt_an)))\npt_w.extend([0] * (max_length - len(pt_w)))\npt_kar.extend([0] * (max_length - len(pt_kar)))\n\n\n\n            \n            \n   \n\nfor k in range(len(employee)):\n    data.append([ss_id[k],employee[k], employee_name[k],income_tax_slab[k],total_working_days[k],payment_days[k],leave_without_pay[k],start_date[k],end_date[k], basic[k],hra[k],twa[k],uniform[k],medical[k],food_coupon[k],heema[k],bonus[k],bonus_accrual[k],fuel[k],vehicle[k],driver[k],lta[k],car_perquisite[k],driver_perquisite[k],epf[k],nps[k],esic[k],bonus_deduction[k],pt_g[k],pt_m[k],pt_an[k],pt_w[k],pt_kar[k],income_tax[k],gross_pay[k],net_pay[k],total_deduction[k]])\n\ndef execute(filters=None):\n    return columns, data\n    \n\ndata=columns,data,None,None,None\n    \n\n",
  "report_type": "Script Report",
  "roles": [
   {
    "parent": "Salary Slip Register",
    "parentfield": "roles",
    "parenttype": "Report",
    "role": "HR User"
   },
   {
    "parent": "Salary Slip Register",
    "parentfield": "roles",
    "parenttype": "Report",
    "role": "HR Manager"
   },
   {
    "parent": "Salary Slip Register",
    "parentfield": "roles",
    "parenttype": "Report",
    "role": "Employee"
   },
   {
    "parent": "Salary Slip Register",
    "parentfield": "roles",
    "parenttype": "Report",
    "role": "Employee Self Service"
   }
  ]
 },
 {
  "add_total_row": 1,
  "columns": [],
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Report",
  "filters": [],
  "is_standard": "No",
  "javascript": "\nfrappe.query_reports[\"Salary Slip Registers\"] = {\n    \"filters\": [\n        {\n            \"label\": \"Employee ID\",\n            \"fieldname\": \"employee\",\n            \"fieldtype\": \"Link\",\n            \"options\": \"Employee\",\n            \"width\": 200\n        },\n        {\n            \"label\": \"Income Tax Slab\",\n            \"fieldname\": \"income_tax\",\n            \"fieldtype\": \"Link\",\n            \"options\": \"Income Tax Slab\",\n            \"width\": 200\n        },\n        \n         {\n            \"label\": \"From date\",\n            \"fieldname\": \"from_date\",\n            \"fieldtype\": \"Date\",\n            \n            \"width\": 200\n        },\n         {\n            \"label\": \"To Date\",\n            \"fieldname\": \"to_date\",\n            \"fieldtype\": \"Date\",\n            \n            \"width\": 200\n        },\n        \n        \n        \n    ]\n}\n",
  "json": null,
  "letter_head": "",
  "modified": "2024-08-13 09:25:47.330134",
  "module": "cn-indian-payroll",
  "name": "Salary Slip Registers",
  "prepared_report": 0,
  "query": null,
  "ref_doctype": "Salary Slip",
  "reference_report": null,
  "report_name": "Salary Slip Registers",
  "report_script": "\ncolumns = [\n    \n    {\"fieldname\": \"ss_id\", \"label\": \"Salary Slip ID\", \"fieldtype\": \"Data\", \"width\": 150},\n    \n    \n    \n    {\"fieldname\": \"employee\", \"label\": \"Employee ID\", \"fieldtype\": \"Data\", \"width\": 150},\n    {\"fieldname\": \"employee_name\", \"label\": \"Employee Name\", \"fieldtype\": \"Data\", \"width\": 150},\n    {\"fieldname\": \"income_tax_slab\", \"label\": \"Income Tax Slab\", \"fieldtype\": \"Data\", \"width\": 150},\n    {\"fieldname\": \"employee_state\", \"label\": \"Employee State\", \"fieldtype\": \"Data\", \"width\": 150},\n    \n    {\"fieldname\": \"working_days\", \"label\": \"Working Days\", \"fieldtype\": \"Data\", \"width\": 150},\n    {\"fieldname\": \"payment_days\", \"label\": \"Payment Days\", \"fieldtype\": \"Data\", \"width\": 150},\n    {\"fieldname\": \"LOP\", \"label\": \"LOP\", \"fieldtype\": \"Data\", \"width\": 150},\n    {\"fieldname\": \"lop_reversal_days\", \"label\": \"LOP Reversal Days\", \"fieldtype\": \"Data\", \"width\": 150},\n    \n    {\"fieldname\": \"start_date\", \"label\": \"Start Date\", \"fieldtype\": \"Date\", \"width\": 150},\n    {\"fieldname\": \"end_date\", \"label\": \"End Date\", \"fieldtype\": \"Date\", \"width\": 150},\n    \n    {\"fieldname\": \"annual_ctc\", \"label\": \"Annual CTC\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"monthly_ctc\", \"label\": \"Monthly CTC\", \"fieldtype\": \"Currency\", \"width\": 150},\n    \n    {\"fieldname\": \"basic\", \"label\": \"Basic\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"basic_arrear\", \"label\": \"Basic Arrear\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"hra\", \"label\": \"HRA\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"hra_arrear\", \"label\": \"HRA Arrear\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"twa_dfi\", \"label\": \"TWA DFI\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"twa_dfi_arrear\", \"label\": \"TWA DFI Arrear\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"uniform_allowance\", \"label\": \"Uniform Allowance\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"uniform_allowance_arrear\", \"label\": \"Uniform Allowance Arrear\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"medical_allowance\", \"label\": \"Medical Allowance\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"medical_allowance_arrear\", \"label\": \"Medical Allowance Arrear\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"heema\", \"label\": \"HEEMA\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"heema_arrear\", \"label\": \"HEEMA Arrear\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"food_coupon\", \"label\": \"Food Coupon(OR)\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"food_coupon_arrear\", \"label\": \"Food Coupon Arrear(OR)\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"food_coupon_earning\", \"label\": \"Food Coupon(NR)\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"food_coupon_earning_arrear\", \"label\": \"Food Coupon Arrear(NR)\", \"fieldtype\": \"Currency\", \"width\": 100},\n    \n     {\"fieldname\": \"gross_pay\", \"label\": \"Gross Pay\", \"fieldtype\": \"Currency\", \"width\": 100},\n     \n     #GROSSPAY\n     \n     {\"fieldname\": \"special_hra\", \"label\": \"Special HRA\", \"fieldtype\": \"Currency\", \"width\": 100},\n     {\"fieldname\": \"special_hra_arrear\", \"label\": \"Special HRA Arrear\", \"fieldtype\": \"Currency\", \"width\": 100},\n     {\"fieldname\": \"special_conveyance\", \"label\": \"Special Conveyance\", \"fieldtype\": \"Currency\", \"width\": 100},\n     {\"fieldname\": \"special_conveyance_arrear\", \"label\": \"Special Conveyance Arrear\", \"fieldtype\": \"Currency\", \"width\": 100},\n\n     {\"fieldname\": \"car_allowance\", \"label\": \"Car Allowance\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"car_allowance_arrear\", \"label\": \"Car Allowance Arrear\", \"fieldtype\": \"Currency\", \"width\": 100},\n\n     {\"fieldname\": \"ex_gratia\", \"label\": \"Ex-Gratia\", \"fieldtype\": \"Currency\", \"width\": 100},\n     {\"fieldname\": \"incentive\", \"label\": \"Incentive\", \"fieldtype\": \"Currency\", \"width\": 100},\n     \n     {\"fieldname\": \"relocation\", \"label\": \"Relocation\", \"fieldtype\": \"Currency\", \"width\": 100},\n     {\"fieldname\": \"extra_driver_salary\", \"label\": \"Extra Driver Salary\", \"fieldtype\": \"Currency\", \"width\": 100},\n     \n     #{\"fieldname\": \"car_perquisite\", \"label\": \"Car Perquisite\", \"fieldtype\": \"Currency\", \"width\": 200},\n    # {\"fieldname\": \"driver_perquisite\", \"label\": \"Driver Perquisite\", \"fieldtype\": \"Currency\", \"width\": 200},\n        {\"fieldname\": \"monthly_bonus\", \"label\": \"Monthly Bonus\", \"fieldtype\": \"Currency\", \"width\": 100},\n        {\"fieldname\": \"monthly_bonus_arrear\", \"label\": \"Monthly Bonus Arrear\", \"fieldtype\": \"Currency\", \"width\": 100},\n\n     \n     {\"fieldname\": \"nps\", \"label\": \"NPS\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"nps_arrear\", \"label\": \"NPS Arrear\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"bonus\", \"label\": \"Bonus\", \"fieldtype\": \"Currency\", \"width\": 100},\n    # {\"fieldname\": \"bonus_arrear\", \"label\": \"Bonus Arrear\", \"fieldtype\": \"Currency\", \"width\": 100},\n    \n    {\"fieldname\": \"total_income\", \"label\": \"Total Income\", \"fieldtype\": \"Currency\", \"width\": 100},\n    \n    #TOTAL INCOME\n    \n    \n    \n    \n    \n    \n    {\"fieldname\": \"employee_provident_fund\", \"label\": \"Employee Provident Fund\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"employee_provident_fund_arrear\", \"label\": \"Employee Provident Fund Arrear\", \"fieldtype\": \"Currency\", \"width\": 200},\n    \n    {\"fieldname\": \"esic\", \"label\": \"ESIC\", \"fieldtype\": \"Currency\", \"width\": 100},\n    {\"fieldname\": \"income_tax\", \"label\": \"Income Tax\", \"fieldtype\": \"Currency\", \"width\": 100},\n    \n    {\"fieldname\": \"food_coupon_deduction\", \"label\": \"Food Coupon Deduction\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"food_coupon_deduction_arrear\", \"label\": \"Food Coupon Deduction Arrear\", \"fieldtype\": \"Currency\", \"width\": 150},\n\n    {\"fieldname\": \"advance_deduction\", \"label\": \"Advance Deduction\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"loan_deduction\", \"label\": \"Personal Loan\", \"fieldtype\": \"Currency\", \"width\": 150},\n    \n    \n   \n    {\"fieldname\": \"pt_g\", \"label\": \"Professional Tax (Gujarat)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"pt_m\", \"label\": \"Professional Tax (Maharashtra)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"pt_ka\", \"label\": \"Professional Tax (Karnataka)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"pt_ke\", \"label\": \"Professional Tax (Kerala)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"pt_w\", \"label\": \"Professional Tax (West Bengal)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"pt_an\", \"label\": \"Professional Tax (Andra Pradesh)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"bonus_deduction\", \"label\": \"Bonus Deduction\", \"fieldtype\": \"Currency\", \"width\": 150},\n    {\"fieldname\": \"bonus_deduction_arrear\", \"label\": \"Bonus Deduction Arrear\", \"fieldtype\": \"Currency\", \"width\": 150},\n\n    \n    {\"fieldname\": \"total_deduction\", \"label\": \"Total Deduction\", \"fieldtype\": \"Currency\", \"width\": 150},\n    \n    {\"fieldname\": \"petrol_reimbursement\", \"label\": \"Petrol Reimbursement\", \"fieldtype\": \"Currency\", \"width\": 200},\n   # {\"fieldname\": \"petrol_reimbursement_arrear\", \"label\": \"Petrol Reimbursement Arrear\", \"fieldtype\": \"Currency\", \"width\": 200},\n    \n    {\"fieldname\": \"vehicle_maintenance_reimbursement\", \"label\": \"Vehicle Maintenance Reimbursement\", \"fieldtype\": \"Currency\", \"width\": 250},\n   # {\"fieldname\": \"vehicle_maintenance_reimbursement_arrear\", \"label\": \"Vehicle Maintenance Reimbursement Arrear\", \"fieldtype\": \"Currency\", \"width\": 250},\n\n    {\"fieldname\": \"driver_salary_reimbursement\", \"label\": \"Driver Salary Reimbursement\", \"fieldtype\": \"Currency\", \"width\": 200},\n   # {\"fieldname\": \"driver_salary_reimbursement_arrear\", \"label\": \"Driver Salary Reimbursement Arrear\", \"fieldtype\": \"Currency\", \"width\": 200},\n\n    {\"fieldname\": \"leave_travel_allowance\", \"label\": \"Leave Travel Allowance\", \"fieldtype\": \"Currency\", \"width\": 200},\n   # {\"fieldname\": \"leave_travel_allowance_arrear\", \"label\": \"Leave Travel Allowance Arrear\", \"fieldtype\": \"Currency\", \"width\": 200},\n   \n    {\"fieldname\": \"lta_taxable\", \"label\": \"LTA (Taxable)\", \"fieldtype\": \"Currency\", \"width\": 200},\n    {\"fieldname\": \"lta_non_taxable\", \"label\": \"LTA (Non-Taxable)\", \"fieldtype\": \"Currency\", \"width\": 200},\n\n\n    {\"fieldname\": \"net_pay\", \"label\": \"Net Pay\", \"fieldtype\": \"Currency\", \"width\": 100},\n    \n    \n    \n    \n     \n    \n    \n    \n]\n\n\n\n\n\n\n\n\n\n\n\ndef get_salary_slips(filters=None):\n    if filters is None:\n        filters = {}\n\n    conditions = {\"docstatus\": [\"in\", [0, 1]]}\n    if filters.get(\"employee\"):\n        conditions[\"employee\"] = filters[\"employee\"]\n        \n        \n    if filters.get(\"from_date\"):\n        conditions[\"start_date\"] = (\">=\", filters[\"from_date\"])\n        \n    if filters.get(\"to_date\"):\n        conditions[\"end_date\"] = (\"<=\", filters[\"to_date\"])\n        \n    if filters.get(\"income_tax\"):\n        conditions[\"custom_income_tax_slab\"] = filters[\"income_tax\"]\n        \n        \n        \n        \n    data = frappe.get_list(\n        'Salary Slip',\n        fields=[\"*\"],\n        filters=conditions,\n        order_by=\"name DESC\",\n       \n    )\n   \n    return data\n    \nss_id=[]   \ntotal_working_days=[]\npayment_days=[]\nleave_without_pay=[]\nlop_reversal_days=[]\nemployee = []\nemployee_name = []\nbasic = []\nhra = []\ntwa = []  \nuniform = []\nmedical = []\nfood_coupon = []\nheema = []\n\nfuel = []  \ndriver = [] \nvehicle=[]\nlta = []  \n\nepf=[]\nnps=[]\nesic=[]\n\npt_g=[]\npt_m=[]\npt_an=[]\npt_w=[]\npt_kar=[]\npt_ker=[]\nincome_tax_slab=[]\nemployee_state=[]\nannual_ctc=[]\nmonthly_ctc=[]\n\ntotal_deduction=[]\nnet_pay=[]\ngross_pay=[]\ntotal_income=[]\nincome_tax=[]\n\ncar_perquisite=[]\ndriver_perquisite=[]\nstart_date=[]\nend_date=[]\n\nbonus_deduction=[]\n\nbonus=[]\nbonus_accrual=[]\n\ndata=[]\n\nbasic_arrear=[]\nhra_arrear=[]\n\ntwa_dfi_arrear=[]\nheema_arrear=[]\nuniform_allowance_arrear=[]\nmedical_allowance_arrear=[]\n\nfood_coupon_earning=[]\nfood_coupon_earning_arrear=[]\n\nfood_coupon_arrear=[]\nspecial_hra=[]\ncar_allowance=[]\nspecial_conveyance=[]\n\nincentive=[]\nex_gratia=[]\n\nrelocation=[]\nextra_driver_salary=[]\n\nepf_arrear=[]\nnps_arrear=[]\n\nfood_coupon_deduction=[]\nadvance_deduction=[]\nloan_deduction=[]\n\nspecial_hra_arrear=[]\nspecial_conveyance_arrear=[]\ncar_allowance_arrear=[]\nbonus_arrear=[]\nbonus_deduction_arrear=[]\n\nfood_coupon_deduction_arrear=[]\n\npetrol_reimbursement_arrear=[]\nvehicle_maintenance_reimbursement_arrear=[]\ndriver_salary_reimbursement_arrear=[]\nleave_travel_allowance_arrear=[]\n\n\nmonthly_bonus=[]\nmonthly_bonus_arrear=[]\n\nlta_taxable=[]\nlta_non_taxable=[]\n\nlead_data = get_salary_slips(filters)\n\nfor slip in lead_data:\n    doc = frappe.get_doc('Salary Slip', slip.name)\n    employee.append(doc.employee)\n    employee_name.append(doc.employee_name)\n    total_deduction.append(doc.custom_total_deduction_amount)\n    net_pay.append(doc.custom_net_pay_amount)\n    \n    ss_id.append(doc.name) \n    total_working_days.append(doc.total_working_days) \n    payment_days.append(doc.payment_days) \n    leave_without_pay.append(doc.leave_without_pay) \n    lop_reversal_days.append(doc.custom_lop_reversal_days)\n    \n    gross_pay.append(doc.custom_statutory_grosspay)\n    total_income.append(doc.custom_total_income)\n    \n    income_tax_slab.append(doc.custom_income_tax_slab)\n    employee_state.append(doc.custom_employee_state)\n    annual_ctc.append(doc.custom_annual_ctc)\n    monthly_ctc.append(doc.custom_annual_ctc/12)\n   \n    start_date.append(doc.start_date)\n    end_date.append(doc.end_date)\n    \n    uniform_amount = 0  \n    medical_amount = 0 \n    hra_amount=0\n    basic_amount=0\n    twa_amount=0\n    food_coupon_amount=0\n    heema_amount=0\n    petrol_amount=0\n    vehicle_amount=0\n    driver_amount=0\n    lta_amount=0\n    car_perquisite_amount=0\n    driver_perquisite_amount=0\n    bonus_amount=0\n    basic_arrear_amount=0\n    hra_arrear_amount=0\n    \n    twa_arrear_amount=0\n    uniform_arrear_amount=0\n    medical_arrear_amount=0\n    heema_arrear_amount=0\n    \n    food_coupon_earning_amount=0\n    food_coupon_earning_arrear_amount=0\n    \n    food_coupon_arrear_amount=0\n    special_hra_amount=0\n    car_allowance_amount=0\n    special_conveyance_amount=0\n    \n    incentive_amount=0\n    ex_gratia_amount=0\n    relocation_amount=0\n    extra_driver_salary_amount=0\n    \n    nps_amount=0\n    nps_arrear_amount=0\n    \n    special_hra_arrear_amount=0\n    special_conveyance_arrear_amount=0\n    car_allowance_arrear_amount=0\n    bonus_arrear_amount=0\n    \n    petrol_reimbursement_arrear_amount=0\n    vehicle_maintenance_reimbursement_arrear_amount=0\n    driver_salary_reimbursement_arrear_amount=0\n    leave_travel_allowance_arrear_amount=0\n    \n    \n    monthly_bonus_amount=0\n    monthly_bonus_arrear_amount=0\n    \n    lta_taxable_amount=0\n    lta_non_taxable_amount=0\n    \n    \n    \n    \n    \n   \n    \n    for earning in doc.earnings:\n        if earning.salary_component == \"Uniform\":\n            uniform_amount = earning.amount\n        \n        if earning.salary_component == \"Medical\":\n            medical_amount = earning.amount\n            \n        if earning.salary_component == \"House Rent Allowance\":\n            hra_amount = earning.amount\n            \n        if earning.salary_component == \"Basic\":\n            basic_amount = earning.amount\n            \n        if earning.salary_component == \"Food Coupon\":\n            food_coupon_amount = earning.amount\n            \n        if earning.salary_component == \"TWA-DFI\":\n            twa_amount = earning.amount\n            \n        if earning.salary_component == \"HEEMA\":\n            heema_amount = earning.amount\n            \n        if earning.salary_component == \"Petrol Reimbursement\":\n            petrol_amount = earning.amount\n            \n        if earning.salary_component == \"Vehicle Maintenance Reimbursement\":\n            vehicle_amount = earning.amount\n            \n        if earning.salary_component == \"Driver Salary Reimbursement\":\n            driver_amount = earning.amount\n            \n        if earning.salary_component == \"Leave Travel Allowance\":\n            lta_amount = earning.amount\n            \n        if earning.salary_component == \"Car Perquisite\":\n            car_perquisite_amount = earning.amount\n            \n        if earning.salary_component == \"Driver Perquisite\":\n            driver_perquisite_amount = earning.amount\n            \n        if earning.salary_component == \"Bonus\":\n            bonus_amount = earning.amount\n            \n        if earning.salary_component == \"Basic (Arrear)\":\n            basic_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"House Rent Allowance (Arrear)\":\n            hra_arrear_amount = earning.amount\n            \n            \n            \n        if earning.salary_component == \"TWA-DFI (Arrear)\":\n            twa_arrear_amount = earning.amount\n            \n            \n        if earning.salary_component == \"Uniform (Arrear)\":\n            uniform_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"Medical (Arrear)\":\n            medical_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"HEEMA (Arrear)\":\n            heema_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"Special HRA\":\n            special_hra_amount = earning.amount\n            \n        if earning.salary_component == \"Special Conveyance\":\n            special_conveyance_amount = earning.amount\n            \n        if earning.salary_component == \"Food Coupon (Arrear)\":\n            food_coupon_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"Car Allowance\":\n            car_allowance_amount = earning.amount\n            \n        if earning.salary_component == \"Incentive\":\n            incentive_amount = earning.amount\n            \n        if earning.salary_component == \"Ex-Gratia\":\n            ex_gratia_amount = earning.amount\n            \n       \n            \n        if earning.salary_component == \"Extra Driver Salary\":\n            extra_driver_salary_amount = earning.amount\n            \n        if earning.salary_component == \"Relocation Charges\":\n            relocation_amount = earning.amount\n            \n        if earning.salary_component == \"NPS\":\n            nps_amount = earning.amount\n            \n        if earning.salary_component == \"NPS (Arrear)\":\n            nps_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"Special HRA (Arrear)\":\n            special_hra_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"Special Conveyance (Arrear)\":\n            special_conveyance_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"Car Allowance (Arrear)\":\n            car_allowance_arrear_amount = earning.amount\n        if earning.salary_component == \"Bonus (Arrear)\":\n            bonus_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"Petrol Reimbursement (Arrear)\":\n            petrol_reimbursement_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"Vehicle Maintenance Reimbursement (Arrear)\":\n            vehicle_maintenance_reimbursement_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"Driver Salary Reimbursement (Arrear)\":\n            driver_salary_reimbursement_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"Leave Travel Allowance (Arrear)\":\n            leave_travel_allowance_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"Monthly Bonus\":\n            monthly_bonus_amount = earning.amount\n            \n        if earning.salary_component == \"Monthly Bonus (Arrear)\":\n            monthly_bonus_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"Food Coupon (Earning)\":\n            food_coupon_earning_amount = earning.amount\n            \n        if earning.salary_component == \"Food Coupon (Earning) Arrear\":\n            food_coupon_earning_arrear_amount = earning.amount\n            \n        if earning.salary_component == \"LTA (Taxable)\":\n            lta_taxable_amount = earning.amount\n            \n        if earning.salary_component == \"LTA (Non-Taxable)\":\n            lta_non_taxable_amount = earning.amount\n            \n        \n            \n            \n   \n            \n            \n        \n            \n            \n            \n            \n        \n            \n            \n            \n        \n            \n            \n            \n        \n            \n            \n        \n            \n            \n            \n            \n            \n        \n            \n            \n            \n        \n    lta_taxable.append(lta_taxable_amount)\n    lta_non_taxable.append(lta_non_taxable_amount)\n        \n            \n            \n    food_coupon_earning.append(food_coupon_earning_amount)\n    food_coupon_earning_arrear.append(food_coupon_earning_arrear_amount)\n    \n    uniform.append(uniform_amount)\n    medical.append(medical_amount)\n    hra.append(hra_amount)\n    basic.append(basic_amount)\n    twa.append(twa_amount)\n    \n    food_coupon.append(food_coupon_amount)\n    heema.append(heema_amount)\n    \n    fuel.append(petrol_amount)\n    driver.append(driver_amount)\n    vehicle.append(vehicle_amount)    \n    lta.append(lta_amount)\n    \n    car_perquisite.append(car_perquisite_amount)\n    driver_perquisite.append(driver_perquisite_amount)\n    bonus.append(bonus_amount)\n    basic_arrear.append(basic_arrear_amount)\n    hra_arrear.append(hra_arrear_amount)\n    twa_dfi_arrear.append(twa_arrear_amount)\n    uniform_allowance_arrear.append(uniform_arrear_amount)\n    medical_allowance_arrear.append(medical_arrear_amount)\n    heema_arrear.append(heema_arrear_amount)\n    \n    \n    food_coupon_arrear.append(food_coupon_arrear_amount)\n    special_hra.append(special_hra_amount)\n    car_allowance.append(car_allowance_amount)\n    special_conveyance.append(special_conveyance_amount)\n    \n    ex_gratia.append(ex_gratia_amount)\n    incentive.append(incentive_amount)\n    \n    extra_driver_salary.append(extra_driver_salary_amount)\n    relocation.append(relocation_amount)\n    \n    nps.append(nps_amount)\n    nps_arrear.append(nps_arrear_amount)\n    special_hra_arrear.append(special_hra_arrear_amount)\n    special_conveyance_arrear.append(special_conveyance_arrear_amount)\n    car_allowance_arrear.append(car_allowance_arrear_amount)\n    bonus_arrear.append(bonus_arrear_amount)\n    \n    petrol_reimbursement_arrear.append(petrol_reimbursement_arrear_amount)\n    vehicle_maintenance_reimbursement_arrear.append(vehicle_maintenance_reimbursement_arrear_amount)\n    \n    driver_salary_reimbursement_arrear.append(driver_salary_reimbursement_arrear_amount)\n    leave_travel_allowance_arrear.append(leave_travel_allowance_arrear_amount)\n    \n    monthly_bonus.append(monthly_bonus_amount)\n    monthly_bonus_arrear.append(monthly_bonus_arrear_amount)\n    \n    \n    \n    \n    \n    \n   \n    \n    epf_amount=0\n    #nps_amount=0\n    esic_amount=0\n    bonus_deduction_amount=0\n    \n    g_amount=0\n    m_amount=0\n    a_amount=0\n    w_amount=0\n    ka_amount=0\n    ke_amount=0\n    income_tax_amount=0\n    \n    epf_arrear_amount=0\n   # nps_arrear_amount=0\n    \n    food_coupon_deduction_amount=0\n    advance_deduction_amount=0\n    loan_deduction_amount=0\n    \n    \n    bonus_deduction_arrear_amount=0\n    food_coupon_deduction_arrear_amount=0\n    \n    for deduction in doc.deductions:\n        if deduction.salary_component == \"Employee Provident Fund\":\n            epf_amount = deduction.amount\n            \n        #if deduction.salary_component == \"NPS\":\n        #    nps_amount = deduction.amount\n            \n        if deduction.salary_component == \"ESIC\":\n            esic_amount = deduction.amount\n            \n       \n        \n        if deduction.salary_component == \"Professional Tax (Gujarat)\":\n            g_amount = deduction.amount\n            \n        if deduction.salary_component == \"Professional Tax (Maharashtra)\":\n            m_amount = deduction.amount\n        if deduction.salary_component == \"Professional Tax (Andra Pradesh)\":\n            a_amount = deduction.amount\n        if deduction.salary_component == \"Professional Tax (West Bengal)\":\n            w_amount = deduction.amount\n        if deduction.salary_component == \"Professional Tax (Karnata)\":\n            ka_amount = deduction.amount\n        if deduction.salary_component == \"Professional Tax (Kerala)\":\n            ke_amount = deduction.amount\n            \n            \n        if deduction.salary_component == \"Income Tax\":\n            income_tax_amount = deduction.amount\n            \n        if deduction.salary_component == \"Bonus Deduction\":\n            bonus_deduction_amount = deduction.amount\n            \n        if deduction.salary_component == \"Employee Provident Fund (Arrear)\":\n            epf_arrear_amount = deduction.amount\n            \n        #if deduction.salary_component == \"NPS (Arrear)\":\n        #    nps_arrear_amount = deduction.amount\n            \n        if deduction.salary_component == \"Food Coupon (Deduction)\":\n            food_coupon_deduction_amount= deduction.amount\n        if deduction.salary_component == \"Employee Advance\":\n            advance_deduction_amount = deduction.amount\n             \n        if deduction.salary_component == \"Loan Deduction\":\n            loan_deduction_amount= deduction.amount\n            \n        if deduction.salary_component == \"Bonus Deduction (Arrear)\":\n            bonus_deduction_arrear_amount= deduction.amount\n            \n        if deduction.salary_component == \"Food Coupon (Deduction  Arrear)\":\n            food_coupon_deduction_arrear_amount= deduction.amount\n            \n            \n        \n        \n        \n            \n            \n            \n            \n            \n            \n\n            \n        \n\n            \n        \n\n            \n        \n            \n            \n            \n    epf.append(epf_amount)\n    #nps.append(nps_amount)\n    esic.append(esic_amount)\n   \n    pt_g.append(g_amount)\n    pt_m.append(m_amount)\n    pt_an.append(a_amount)\n    pt_w.append(w_amount)\n    pt_kar.append(ka_amount)\n    pt_ker.append(ke_amount)\n    \n    income_tax.append(income_tax_amount)\n    bonus_deduction.append(bonus_deduction_amount)\n    \n    epf_arrear.append(epf_arrear_amount)\n    #nps_arrear.append(nps_arrear_amount)\n    \n    \n    advance_deduction.append(advance_deduction_amount)\n    food_coupon_deduction.append(food_coupon_deduction_amount)\n    bonus_deduction_arrear.append(bonus_deduction_arrear_amount)\n    \n    food_coupon_deduction_arrear.append(food_coupon_deduction_arrear_amount)\n    \n    \n    for loan in doc.loans:\n        loan_deduction_amount=loan_deduction_amount+loan.total_payment\n        \n\n\n    loan_deduction.append(loan_deduction_amount)\n\n\n  \n\nfor k in range(len(employee)):\n    data.append([ss_id[k],employee[k],\n    employee_name[k],\n    income_tax_slab[k],\n    employee_state[k],\n    total_working_days[k],\n    payment_days[k],\n    leave_without_pay[k],\n    lop_reversal_days[k],\n    start_date[k],\n    end_date[k],\n    annual_ctc[k],\n    monthly_ctc[k],\n    basic[k],\n    basic_arrear[k],\n    \n    hra[k],\n    hra_arrear[k],\n    twa[k],\n    twa_dfi_arrear[k],\n    uniform[k],\n    uniform_allowance_arrear[k],\n    medical[k],\n    medical_allowance_arrear[k],\n    heema[k],\n    heema_arrear[k],\n   \n    food_coupon[k],\n    food_coupon_arrear[k],\n    food_coupon_earning[k],\n    food_coupon_earning_arrear[k],\n    gross_pay[k],\n    \n    \n    \n    special_hra[k],\n    special_hra_arrear[k],\n    special_conveyance[k],\n    special_conveyance_arrear[k],\n    car_allowance[k],\n    car_allowance_arrear[k],\n    ex_gratia[k],\n    incentive[k],\n    \n    relocation[k],\n    extra_driver_salary[k],\n    \n    #car_perquisite[k],\n    #driver_perquisite[k],\n    monthly_bonus[k],\n    monthly_bonus_arrear[k],\n    \n    \n    nps[k],\n    nps_arrear[k],\n    bonus[k],\n   # bonus_arrear[k],\n    total_income[k],\n   \n   \n    epf[k],\n    epf_arrear[k],\n    \n    esic[k],\n    income_tax[k],\n    \n    food_coupon_deduction[k],\n    food_coupon_deduction_arrear[k],\n    advance_deduction[k],\n    loan_deduction[k],\n    pt_g[k],pt_m[k],pt_kar[k],pt_ker[k],pt_w[k],pt_an[k],\n    bonus_deduction[k],\n    bonus_deduction_arrear[k],\n    \n    total_deduction[k],\n    \n    fuel[k],\n   # petrol_reimbursement_arrear[k],\n    vehicle[k],\n   # vehicle_maintenance_reimbursement_arrear[k],\n    driver[k],\n   # driver_salary_reimbursement_arrear[k],\n    lta[k],\n    #leave_travel_allowance_arrear[k],\n    lta_taxable[k],\n    lta_non_taxable[k],\n    net_pay[k],\n    ])\n\ndef execute(filters=None):\n    return columns, data\n    \n\ndata=columns,data,None,None,None\n    \n    \n\n",
  "report_type": "Script Report",
  "roles": [
   {
    "parent": "Salary Slip Registers",
    "parentfield": "roles",
    "parenttype": "Report",
    "role": "HR User"
   },
   {
    "parent": "Salary Slip Registers",
    "parentfield": "roles",
    "parenttype": "Report",
    "role": "HR Manager"
   },
   {
    "parent": "Salary Slip Registers",
    "parentfield": "roles",
    "parenttype": "Report",
    "role": "Employee"
   },
   {
    "parent": "Salary Slip Registers",
    "parentfield": "roles",
    "parenttype": "Report",
    "role": "Employee Self Service"
   }
  ]
 },
 {
  "add_total_row": 1,
  "columns": [],
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Report",
  "filters": [],
  "is_standard": "Yes",
  "javascript": "frappe.query_reports[\"Salary Reco\"] = {\r\n    \"filters\": [\r\n        {\r\n            \"label\": \"Employee ID\",\r\n            \"fieldname\": \"employee\",\r\n            \"fieldtype\": \"Link\",\r\n            \"options\": \"Employee\",\r\n            \"width\": 200\r\n        },\r\n        {\r\n            \"label\": \"Previous Month\",\r\n            \"fieldname\": \"previous_month\",\r\n            \"fieldtype\": \"Select\",\r\n            \"options\": [\"\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\r\n            \"width\": 200\r\n        },\r\n        {\r\n            \"label\": \"Current Month\",\r\n            \"fieldname\": \"current_month\",\r\n            \"fieldtype\": \"Select\",\r\n            \"options\": [\"\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\r\n            \"width\": 200\r\n        }\r\n    ]\r\n}\r\n",
  "json": null,
  "letter_head": null,
  "modified": "2024-07-29 19:34:34.621894",
  "module": "cn-indian-payroll",
  "name": "Salary Reco",
  "prepared_report": 0,
  "query": null,
  "ref_doctype": "Salary Slip",
  "reference_report": null,
  "report_name": "Salary Reco",
  "report_script": "",
  "report_type": "Script Report",
  "roles": [
   {
    "parent": "Salary Reco",
    "parentfield": "roles",
    "parenttype": "Report",
    "role": "HR User"
   },
   {
    "parent": "Salary Reco",
    "parentfield": "roles",
    "parenttype": "Report",
    "role": "Employee"
   },
   {
    "parent": "Salary Reco",
    "parentfield": "roles",
    "parenttype": "Report",
    "role": "HR Manager"
   },
   {
    "parent": "Salary Reco",
    "parentfield": "roles",
    "parenttype": "Report",
    "role": "Employee Self Service"
   }
  ]
 }
]